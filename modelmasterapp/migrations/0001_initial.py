# Generated by Django 5.2.1 on 2025-05-22 04:46

import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BathNumber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bath_number', models.CharField(help_text='Bath Number', max_length=100, unique=True)),
                ('bath_tub', models.CharField(blank=True, help_text='Bath Tub', max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Brass_QC_Rejection_Table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brass_rejection_reason', models.TextField(help_text='Reason for rejection')),
                ('brass_rejection_count', models.PositiveIntegerField(help_text='Count of rejected items')),
            ],
        ),
        migrations.CreateModel(
            name='InspectionAccept',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lot_id', models.CharField(help_text='Unique identifier for the lot.', max_length=255)),
                ('jig_id', models.CharField(help_text='Identifier for the jig used in inspection.', max_length=255)),
                ('sample_count', models.PositiveIntegerField(help_text='Number of samples inspected.')),
                ('position', models.CharField(help_text='Position of the sample during inspection.', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record is created.')),
            ],
        ),
        migrations.CreateModel(
            name='InspectRejectionReasonTable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rejection_reason', models.TextField(help_text='Reason for rejection')),
            ],
        ),
        migrations.CreateModel(
            name='IP_Rejection_Table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rejection_reason_id', models.CharField(blank=True, editable=False, max_length=10, null=True)),
                ('rejection_reason', models.TextField(help_text='Reason for rejection')),
                ('rejection_count', models.PositiveIntegerField(help_text='Count of rejected items')),
            ],
        ),
        migrations.CreateModel(
            name='IP_RejectionGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='IQF_Rejection_Table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iqf_rejection_reason', models.TextField(help_text='Reason for rejection')),
                ('iqf_rejection_count', models.PositiveIntegerField(help_text='Count of rejected items')),
            ],
        ),
        migrations.CreateModel(
            name='JigDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jig_qr_id', models.CharField(max_length=100)),
                ('faulty_slots', models.IntegerField(default=0)),
                ('jig_type', models.CharField(max_length=50)),
                ('jig_capacity', models.IntegerField()),
                ('bath_number', models.CharField(max_length=50)),
                ('bath_tub', models.CharField(blank=True, help_text='Bath Tub', max_length=100, null=True)),
                ('plating_color', models.CharField(max_length=50)),
                ('empty_slots', models.IntegerField(default=0)),
                ('ep_bath_type', models.CharField(max_length=50)),
                ('total_cases_loaded', models.IntegerField()),
                ('jig_cases_remaining_count', models.IntegerField(blank=True, default=0, null=True)),
                ('forging', models.CharField(max_length=100)),
                ('no_of_model_cases', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, size=None)),
                ('no_of_cycle', models.IntegerField(default=30)),
                ('lot_id', models.CharField(max_length=100)),
                ('new_lot_ids', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, size=None)),
                ('electroplating_only', models.BooleanField(default=False)),
                ('lot_id_quantities', models.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location_name', models.CharField(help_text='Name of the location', max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ModelImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('master_image', models.ImageField(upload_to='model_images/')),
            ],
        ),
        migrations.CreateModel(
            name='Plating_Color',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plating_color', models.CharField(help_text='Plating color', max_length=255, unique=True)),
                ('plating_color_internal', models.CharField(blank=True, help_text='Short internal code used in stock number (e.g., B for Black)', max_length=10, null=True)),
                ('jig_unload_zone_1', models.BooleanField(default=False, help_text='Indicates if Jig Unload Zone 1 is active')),
                ('jig_unload_zone_2', models.BooleanField(default=False, help_text='Indicates if Jig Unload Zone 2 is active')),
            ],
        ),
        migrations.CreateModel(
            name='PolishFinishType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('polish_finish', models.CharField(help_text='Type of polish finish', max_length=255, unique=True)),
                ('polish_internal', models.CharField(default='DefaultInternal', help_text='Internal name of the Polish Finish', max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TrayType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tray_type', models.CharField(help_text='Type of tray', max_length=255, unique=True)),
                ('tray_capacity', models.IntegerField(help_text='Number of watches the tray can hold')),
                ('tray_color', models.CharField(blank=True, help_text='Color of the tray', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor_name', models.CharField(help_text='Name of the vendor', max_length=255, unique=True)),
                ('vendor_internal', models.CharField(help_text='Internal name of the vendor', max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Version',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version_name', models.CharField(help_text='Version name', max_length=255, unique=True)),
                ('version_internal', models.CharField(blank=True, help_text='Version Internal', max_length=255, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Brass_Qc_Accepted_TrayID_Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lot_id', models.CharField(blank=True, help_text='Lot ID', max_length=50, null=True)),
                ('tray_id', models.CharField(max_length=100, unique=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Brass_Qc_Accepted_TrayScan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lot_id', models.CharField(blank=True, help_text='Lot ID', max_length=50, null=True)),
                ('brass_accepted_tray_quantity', models.CharField(help_text='Accepted Tray Quantity')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Brass_QC_Rejection_ReasonStore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lot_id', models.CharField(blank=True, help_text='Lot ID', max_length=50, null=True)),
                ('brass_total_rejection_quantity', models.PositiveIntegerField(help_text='Total Rejection Quantity')),
                ('brass_batch_rejection', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Timestamp of the record')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('brass_rejection_reason', models.ManyToManyField(blank=True, to='modelmasterapp.brass_qc_rejection_table')),
            ],
        ),
        migrations.CreateModel(
            name='Brass_QC_Rejected_TrayScan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lot_id', models.CharField(blank=True, help_text='Lot ID', max_length=50, null=True)),
                ('brass_rejected_tray_quantity', models.CharField(help_text='Rejected Tray Quantity')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('brass_rejection_reason', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='modelmasterapp.brass_qc_rejection_table')),
            ],
        ),
        migrations.CreateModel(
            name='InspectionReject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lot_id', models.CharField(help_text='Unique identifier for the lot.', max_length=255)),
                ('jig_id', models.CharField(help_text='Identifier for the jig used in inspection.', max_length=255)),
                ('sample_count', models.PositiveIntegerField(help_text='Number of samples inspected.')),
                ('position', models.CharField(help_text='Position of the sample during inspection.', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the record is created.')),
                ('Reason', models.ForeignKey(help_text='Reason for rejection', on_delete=django.db.models.deletion.CASCADE, to='modelmasterapp.inspectrejectionreasontable')),
            ],
        ),
        migrations.CreateModel(
            name='IP_Accepted_TrayID_Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lot_id', models.CharField(blank=True, help_text='Lot ID', max_length=50, null=True)),
                ('tray_id', models.CharField(max_length=100, unique=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='IP_Accepted_TrayScan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lot_id', models.CharField(blank=True, help_text='Lot ID', max_length=50, null=True)),
                ('accepted_tray_quantity', models.CharField(help_text='Accepted Tray Quantity')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='IP_Rejection_ReasonStore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lot_id', models.CharField(blank=True, help_text='Lot ID', max_length=50, null=True)),
                ('total_rejection_quantity', models.PositiveIntegerField(help_text='Total Rejection Quantity')),
                ('batch_rejection', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('rejection_reason', models.ManyToManyField(blank=True, to='modelmasterapp.ip_rejection_table')),
            ],
        ),
        migrations.CreateModel(
            name='IP_Rejected_TrayScan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lot_id', models.CharField(blank=True, help_text='Lot ID', max_length=50, null=True)),
                ('rejected_tray_quantity', models.CharField(help_text='Rejected Tray Quantity')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('rejection_reason', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='modelmasterapp.ip_rejection_table')),
            ],
        ),
        migrations.AddField(
            model_name='ip_rejection_table',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rejection_reasons', to='modelmasterapp.ip_rejectiongroup'),
        ),
        migrations.CreateModel(
            name='IQF_Accepted_TrayID_Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lot_id', models.CharField(blank=True, help_text='Lot ID', max_length=50, null=True)),
                ('tray_id', models.CharField(max_length=100, unique=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='IQF_Accepted_TrayScan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lot_id', models.CharField(blank=True, help_text='Lot ID', max_length=50, null=True)),
                ('iqf_accepted_tray_quantity', models.CharField(help_text='Accepted Tray Quantity')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='IQF_Rejection_ReasonStore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lot_id', models.CharField(blank=True, help_text='Lot ID', max_length=50, null=True)),
                ('iqf_total_rejection_quantity', models.PositiveIntegerField(help_text='Total Rejection Quantity')),
                ('iqf_batch_rejection', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('iqf_rejection_reason', models.ManyToManyField(blank=True, to='modelmasterapp.iqf_rejection_table')),
            ],
        ),
        migrations.CreateModel(
            name='IQF_Rejected_TrayScan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lot_id', models.CharField(blank=True, help_text='Lot ID', max_length=50, null=True)),
                ('iqf_rejected_tray_quantity', models.CharField(help_text='Rejected Tray Quantity')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('iqf_rejection_reason', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='modelmasterapp.iqf_rejection_table')),
            ],
        ),
        migrations.CreateModel(
            name='ModelMaster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_no', models.CharField(max_length=100, unique=True)),
                ('ep_bath_type', models.CharField(max_length=100)),
                ('tray_capacity', models.IntegerField(blank=True, null=True)),
                ('brand', models.CharField(max_length=100)),
                ('gender', models.CharField(max_length=50)),
                ('wiping_required', models.BooleanField(default=False)),
                ('images', models.ManyToManyField(blank=True, to='modelmasterapp.modelimage')),
                ('polish_finish', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='modelmasterapp.polishfinishtype')),
                ('tray_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='modelmasterapp.traytype')),
                ('vendor_internal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='modelmasterapp.vendor')),
            ],
        ),
        migrations.CreateModel(
            name='Location_Tracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_stock_quantity', models.IntegerField(default=0)),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='modelmasterapp.location')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('model_stock_no', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='modelmasterapp.modelmaster')),
            ],
        ),
        migrations.CreateModel(
            name='JigLoadingMaster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('jig_type', models.CharField(help_text='Jig Type', max_length=100)),
                ('jig_capacity', models.IntegerField(help_text='Jig Capacity')),
                ('forging_info', models.CharField(help_text='Forging Info', max_length=100)),
                ('model_stock_no', models.ForeignKey(help_text='Model Stock Number', on_delete=django.db.models.deletion.CASCADE, to='modelmasterapp.modelmaster')),
            ],
        ),
        migrations.CreateModel(
            name='ModelMasterCreation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_id', models.CharField(max_length=50, unique=True)),
                ('lot_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('polish_finish', models.CharField(max_length=100)),
                ('ep_bath_type', models.CharField(max_length=100)),
                ('plating_color', models.CharField(blank=True, max_length=100, null=True)),
                ('tray_type', models.CharField(max_length=100)),
                ('tray_capacity', models.IntegerField(blank=True, null=True)),
                ('date_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('total_batch_quantity', models.IntegerField()),
                ('initial_batch_quantity', models.IntegerField(default=0)),
                ('current_batch_quantity', models.IntegerField(default=0)),
                ('no_of_trays', models.IntegerField(blank=True, null=True)),
                ('vendor_internal', models.CharField(max_length=100)),
                ('brand', models.CharField(max_length=100)),
                ('gender', models.CharField(max_length=50)),
                ('sequence_number', models.IntegerField(default=0)),
                ('Moved_to_D_Picker', models.BooleanField(default=False, help_text='Moved to D Picker')),
                ('Onhold_picking', models.BooleanField(default=False, help_text='On Hold Picking')),
                ('images', models.ManyToManyField(blank=True, to='modelmasterapp.modelimage')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='modelmasterapp.location')),
                ('model_stock_no', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='model_stock_no', to='modelmasterapp.modelmaster')),
                ('version', models.ForeignKey(help_text='Version', on_delete=django.db.models.deletion.CASCADE, to='modelmasterapp.version')),
            ],
        ),
        migrations.CreateModel(
            name='TrayId',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lot_id', models.CharField(blank=True, help_text='Lot ID', max_length=50, null=True)),
                ('tray_id', models.CharField(help_text='Tray ID', max_length=100, unique=True)),
                ('tray_quantity', models.IntegerField(blank=True, help_text='Quantity in the tray', null=True)),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('delink_tray', models.BooleanField(default=False, help_text='Is tray delinked')),
                ('delink_tray_qty', models.CharField(blank=True, help_text='Delinked quantity', max_length=50, null=True)),
                ('batch_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='modelmasterapp.modelmastercreation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UniqueIDHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_case_quantity', models.IntegerField(default=0)),
                ('is_checked', models.BooleanField(default=False)),
                ('modified_reason', models.TextField(default='No reason provided')),
                ('datetime', models.DateTimeField(auto_now_add=True)),
                ('current_batch_quantity', models.IntegerField(default=0)),
                ('is_modified', models.BooleanField(default=False)),
                ('model_master_creation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='modelmasterapp.modelmastercreation')),
                ('modified_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TotalStockModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_stock', models.IntegerField(help_text='Total stock quantity')),
                ('balance_quantity', models.IntegerField(help_text='Balance quantity')),
                ('assigned_quantity', models.IntegerField(help_text='Assigned quantity')),
                ('lot_id', models.CharField(blank=True, help_text='Lot ID', max_length=50, null=True, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Timestamp of the record')),
                ('day_planning_missing_qty', models.IntegerField(default=0, help_text='Missing quantity in day planning')),
                ('day_planning_assigned_qty', models.IntegerField(default=0, help_text='Original assigned quantity')),
                ('last_process_date_time', models.DateTimeField(blank=True, help_text='Last Process Date/Time', null=True)),
                ('last_process_module', models.CharField(blank=True, help_text='Last Process Module', max_length=255, null=True)),
                ('next_process_module', models.CharField(blank=True, help_text='Next Process Module', max_length=255, null=True)),
                ('total_IP_accpeted_quantity', models.IntegerField(default=0, help_text='Total accepted quantity')),
                ('total_qty_after_rejection_IP', models.IntegerField(default=0, help_text='Total rejected quantity')),
                ('brass_qc_accepted_qty', models.IntegerField(default=0, help_text='Brass QC Accepted Quantity')),
                ('brass_qc_after_rejection_qty', models.IntegerField(default=0, help_text='Brass QC Rejected Quantity')),
                ('iqf_accept_qty_after_accept_ftn', models.IntegerField(default=0, help_text='IQF Accepted Quantity')),
                ('iqf_accepted_qty', models.IntegerField(default=0, help_text='IQF Accepted Quantity')),
                ('iqf_after_rejection_qty', models.IntegerField(default=0, help_text='IQF Rejected Quantity')),
                ('tray_scan_status', models.BooleanField(default=False, help_text='Tray scan status')),
                ('ip_person_qty_verified', models.BooleanField(default=False, help_text='IP Person Quantity Verified')),
                ('accepted_Ip_stock', models.BooleanField(default=False, help_text='Accepted IP Stock')),
                ('few_cases_accepted_Ip_stock', models.BooleanField(default=False, help_text='Few Accepted IP Stock')),
                ('rejected_ip_stock', models.BooleanField(default=False, help_text='Rejected IP Stock')),
                ('wiping_status', models.BooleanField(default=False, help_text='Wiping Status')),
                ('rejected_tray_scan_status', models.BooleanField(default=False)),
                ('accepted_tray_scan_status', models.BooleanField(default=False)),
                ('brass_qc_accptance', models.BooleanField(default=False)),
                ('brass_qc_few_cases_accptance', models.BooleanField(default=False)),
                ('brass_qc_rejection', models.BooleanField(default=False)),
                ('brass_rejection_tray_scan_status', models.BooleanField(default=False)),
                ('brass_accepted_tray_scan_status', models.BooleanField(default=False)),
                ('iqf_acceptance', models.BooleanField(default=False)),
                ('iqf_few_cases_acceptance', models.BooleanField(default=False)),
                ('iqf_rejection', models.BooleanField(default=False)),
                ('iqf_rejection_tray_scan_status', models.BooleanField(default=False)),
                ('iqf_accepted_tray_scan_status', models.BooleanField(default=False)),
                ('send_brass_qc', models.BooleanField(default=False, help_text='Send to Brass QC')),
                ('jig_full_cases', models.BooleanField(default=False, help_text='Indicates if jig is loaded with full cases')),
                ('jig_full_cases_qty', models.IntegerField(default=0, help_text='JIG Full Quantity')),
                ('jig_remining_cases', models.BooleanField(default=False, help_text='Indicates if jig has remaining cases')),
                ('jig_remaining_cases_qty', models.IntegerField(default=0, help_text='JIG Remaining Quantity')),
                ('batch_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='modelmasterapp.modelmastercreation')),
                ('location', models.ManyToManyField(blank=True, help_text='Multiple Locations', to='modelmasterapp.location')),
                ('model_stock_no', models.ForeignKey(help_text='Model Stock Number', on_delete=django.db.models.deletion.CASCADE, to='modelmasterapp.modelmaster')),
                ('plating_color', models.ForeignKey(blank=True, help_text='Plating Color', null=True, on_delete=django.db.models.deletion.SET_NULL, to='modelmasterapp.plating_color')),
                ('polish_finish', models.ForeignKey(blank=True, help_text='Polish Finish', null=True, on_delete=django.db.models.deletion.SET_NULL, to='modelmasterapp.polishfinishtype')),
                ('version', models.ForeignKey(help_text='Version', on_delete=django.db.models.deletion.CASCADE, to='modelmasterapp.version')),
            ],
        ),
        migrations.CreateModel(
            name='DP_TrayIdRescan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tray_id', models.CharField(max_length=100, unique=True)),
                ('lot_id', models.CharField(blank=True, help_text='Lot ID', max_length=50, null=True)),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('scan_count', models.PositiveIntegerField(default=1)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('tray_id', 'lot_id')},
            },
        ),
        migrations.CreateModel(
            name='BatchInitialQuantity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('initial_batch_quantity', models.IntegerField(help_text='Initial Batch Quantity')),
                ('module_name', models.CharField(help_text='Module Name', max_length=255)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Timestamp of the record')),
                ('user', models.ForeignKey(blank=True, help_text='User who recorded the batch', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('model_stock_no', models.ForeignKey(help_text='Model Stock Number', on_delete=django.db.models.deletion.CASCADE, to='modelmasterapp.modelmaster')),
                ('batch_id', models.ForeignKey(help_text='Related Batch ID', on_delete=django.db.models.deletion.CASCADE, to='modelmasterapp.modelmastercreation')),
                ('version', models.ForeignKey(help_text='Version', on_delete=django.db.models.deletion.CASCADE, to='modelmasterapp.version')),
            ],
            options={
                'unique_together': {('batch_id', 'created_at')},
            },
        ),
    ]
